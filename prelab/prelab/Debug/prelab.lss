
prelab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000025e  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800110  00800110  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000892  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c7  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b8  00000000  00000000  0000130d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  000016c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017e  00000000  00000000  00001b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001cfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  9e:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_4>:
uint8_t valor_disp2=0;
uint8_t valor_PORTC=0;
const uint8_t display7[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71};

//interrupcion de botones
ISR(PCINT1_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	//revisa si es la primera o segunda interrupción
	valor_PC=PINC;
  b4:	96 b1       	in	r25, 0x06	; 6
  b6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <valor_PC>
	if (pulsador==0){
  ba:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pulsador>
  be:	81 11       	cpse	r24, r1
  c0:	16 c0       	rjmp	.+44     	; 0xee <__vector_4+0x48>
		if (valor_PC&(1<<1)){
  c2:	91 ff       	sbrs	r25, 1
  c4:	09 c0       	rjmp	.+18     	; 0xd8 <__vector_4+0x32>
			contador++;
  c6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <contador>
  ca:	9f 5f       	subi	r25, 0xFF	; 255
  cc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <contador>
			if (contador==256){
				contador=0;
			}
			pulsador++;
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pulsador>
  d6:	0d c0       	rjmp	.+26     	; 0xf2 <__vector_4+0x4c>
		}else if (valor_PC&(1<<0)){
  d8:	90 ff       	sbrs	r25, 0
  da:	0b c0       	rjmp	.+22     	; 0xf2 <__vector_4+0x4c>
			contador--;
  dc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <contador>
  e0:	91 50       	subi	r25, 0x01	; 1
  e2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <contador>
			if(contador<0){
				contador=255;
			}
			pulsador++;
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pulsador>
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__vector_4+0x4c>
		}
	}else{
		pulsador=0;
  ee:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <pulsador>
	}
}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_21>:



ISR(ADC_vect){
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
	valor_ADC=ADCH;
 112:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 116:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <valor_ADC>
	valor_disp1=(valor_ADC&0x0F);
 11a:	98 2f       	mov	r25, r24
 11c:	9f 70       	andi	r25, 0x0F	; 15
 11e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <valor_disp1>
	valor_disp2=(valor_ADC>>4);
 122:	82 95       	swap	r24
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	ADCSRA&=~(1<<ADIF);
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8f 7e       	andi	r24, 0xEF	; 239
 132:	80 83       	st	Z, r24
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <setup>:

void setup(void){
	cli();
 146:	f8 94       	cli
	DDRD=0b11111111;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	8a b9       	out	0x0a, r24	; 10
	DDRB=0b01111111;
 14c:	8f e7       	ldi	r24, 0x7F	; 127
 14e:	84 b9       	out	0x04, r24	; 4
	DDRC=0b00011100;
 150:	8c e1       	ldi	r24, 0x1C	; 28
 152:	87 b9       	out	0x07, r24	; 7
	PCICR=0;
 154:	e8 e6       	ldi	r30, 0x68	; 104
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	10 82       	st	Z, r1
	PCICR |=(1<<PCIE1);
 15a:	80 81       	ld	r24, Z
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	80 83       	st	Z, r24
	PCMSK1|=(1<<PCINT8);
 160:	ec e6       	ldi	r30, 0x6C	; 108
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	81 60       	ori	r24, 0x01	; 1
 168:	80 83       	st	Z, r24
	PCMSK1|=(1<<PCINT9);
 16a:	80 81       	ld	r24, Z
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	80 83       	st	Z, r24
	UCSR0B=0;
 170:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	sei();
 174:	78 94       	sei
 176:	08 95       	ret

00000178 <init_adc>:
}

void init_adc(void){
	ADMUX = 0;
 178:	ac e7       	ldi	r26, 0x7C	; 124
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	1c 92       	st	X, r1
	ADCSRA=0;
 17e:	ea e7       	ldi	r30, 0x7A	; 122
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	10 82       	st	Z, r1
	
	// VCC=5V
	ADMUX |=(1<<REFS0);
 184:	8c 91       	ld	r24, X
 186:	80 64       	ori	r24, 0x40	; 64
 188:	8c 93       	st	X, r24
	
	// Entrada 6 de MUX
	ADMUX |=(1<<MUX1)|(1<<MUX2)|(1<<ADLAR);
 18a:	8c 91       	ld	r24, X
 18c:	86 62       	ori	r24, 0x26	; 38
 18e:	8c 93       	st	X, r24
	
	//Encender ADC y  habilitar isr adc
	ADCSRA=0;
 190:	10 82       	st	Z, r1
	ADCSRA|=(1<<ADEN)|(1<<ADIE);
 192:	80 81       	ld	r24, Z
 194:	88 68       	ori	r24, 0x88	; 136
 196:	80 83       	st	Z, r24
	
	// preescaler = 16M/128=125k
	ADCSRA|=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 198:	80 81       	ld	r24, Z
 19a:	87 60       	ori	r24, 0x07	; 7
 19c:	80 83       	st	Z, r24
	
	//no se utilizara el estado B
	ADCSRB=0;
 19e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 1a2:	08 95       	ret

000001a4 <main>:
	//DIDRO=0;
}

int main(void){
	init_adc();
 1a4:	0e 94 bc 00 	call	0x178	; 0x178 <init_adc>
	setup();
 1a8:	0e 94 a3 00 	call	0x146	; 0x146 <setup>
	//muestra el valor del contador
	while(1){
		//iniciar primera secuencia del adc
		ADCSRA|=(1<<ADSC);
 1ac:	ea e7       	ldi	r30, 0x7A	; 122
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	8f e7       	ldi	r24, 0x7F	; 127
 1b8:	9e e3       	ldi	r25, 0x3E	; 62
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0x16>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x1c>
 1c0:	00 00       	nop
		_delay_ms(4);
		
		PORTC&=~(1<<PINC3);
 1c2:	88 b1       	in	r24, 0x08	; 8
 1c4:	87 7f       	andi	r24, 0xF7	; 247
 1c6:	88 b9       	out	0x08, r24	; 8
		PORTC&=~(1<<PINC4);
 1c8:	88 b1       	in	r24, 0x08	; 8
 1ca:	8f 7e       	andi	r24, 0xEF	; 239
 1cc:	88 b9       	out	0x08, r24	; 8
		
		//primer display
		PORTC|=(1<<PINC3);
 1ce:	88 b1       	in	r24, 0x08	; 8
 1d0:	88 60       	ori	r24, 0x08	; 8
 1d2:	88 b9       	out	0x08, r24	; 8
		PORTB=display7[valor_disp1];
 1d4:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <valor_disp1>
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e0 50       	subi	r30, 0x00	; 0
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	80 81       	ld	r24, Z
 1e0:	85 b9       	out	0x05, r24	; 5
		//PORTB=0x06;
		if (PORTB&(1<<6)){
 1e2:	2e 9b       	sbis	0x05, 6	; 5
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <main+0x4a>
			PORTC|=(1<<PINC2);
 1e6:	88 b1       	in	r24, 0x08	; 8
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	88 b9       	out	0x08, r24	; 8
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <main+0x50>
		}else{
			PORTC&=~(1<<PINC2);
 1ee:	88 b1       	in	r24, 0x08	; 8
 1f0:	8b 7f       	andi	r24, 0xFB	; 251
 1f2:	88 b9       	out	0x08, r24	; 8
 1f4:	8f e7       	ldi	r24, 0x7F	; 127
 1f6:	9e e3       	ldi	r25, 0x3E	; 62
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0x54>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x5a>
 1fe:	00 00       	nop
		}
		_delay_ms(4);
		PORTC&=~(1<<PINC3);
 200:	88 b1       	in	r24, 0x08	; 8
 202:	87 7f       	andi	r24, 0xF7	; 247
 204:	88 b9       	out	0x08, r24	; 8
		PORTC|=(1<<PINC4);
 206:	88 b1       	in	r24, 0x08	; 8
 208:	80 61       	ori	r24, 0x10	; 16
 20a:	88 b9       	out	0x08, r24	; 8
		//PORTB=0x7C;
		PORTB=display7[valor_disp2];
 20c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	e0 50       	subi	r30, 0x00	; 0
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	80 81       	ld	r24, Z
 218:	85 b9       	out	0x05, r24	; 5
		if (PORTB&(1<<6)){
 21a:	2e 9b       	sbis	0x05, 6	; 5
 21c:	04 c0       	rjmp	.+8      	; 0x226 <main+0x82>
			PORTC|=(1<<PINC2);
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	84 60       	ori	r24, 0x04	; 4
 222:	88 b9       	out	0x08, r24	; 8
 224:	03 c0       	rjmp	.+6      	; 0x22c <main+0x88>
			}else{
			PORTC&=~(1<<PINC2);
 226:	88 b1       	in	r24, 0x08	; 8
 228:	8b 7f       	andi	r24, 0xFB	; 251
 22a:	88 b9       	out	0x08, r24	; 8
 22c:	8f e7       	ldi	r24, 0x7F	; 127
 22e:	9e e3       	ldi	r25, 0x3E	; 62
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0x8c>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x92>
 236:	00 00       	nop
		}
		_delay_ms(4);
		
		//contador de bits
		PORTD=contador;
 238:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
 23c:	8b b9       	out	0x0b, r24	; 11
		if (valor_ADC>=contador){
 23e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <valor_ADC>
 242:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
 246:	98 17       	cp	r25, r24
 248:	20 f0       	brcs	.+8      	; 0x252 <main+0xae>
			PORTC|=(1<<PINC5);
 24a:	88 b1       	in	r24, 0x08	; 8
 24c:	80 62       	ori	r24, 0x20	; 32
 24e:	88 b9       	out	0x08, r24	; 8
 250:	ad cf       	rjmp	.-166    	; 0x1ac <main+0x8>
		}else{
			PORTC&=~(1<<PINC5);
 252:	88 b1       	in	r24, 0x08	; 8
 254:	8f 7d       	andi	r24, 0xDF	; 223
 256:	88 b9       	out	0x08, r24	; 8
 258:	a9 cf       	rjmp	.-174    	; 0x1ac <main+0x8>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
