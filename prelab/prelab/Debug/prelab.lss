
prelab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000001fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000772  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b7  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d6  00000000  00000000  000010c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c8  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  88:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_4>:
int contador=0;
int pulsador=0;
uint8_t valor_PC=0;

//interrupcion de botones
ISR(PCINT1_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	//revisa si es la primera o segunda interrupción
	valor_PC=PINC;
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (pulsador==0){
  aa:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <pulsador>
  ae:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <pulsador+0x1>
  b2:	21 15       	cp	r18, r1
  b4:	31 05       	cpc	r19, r1
  b6:	99 f5       	brne	.+102    	; 0x11e <__vector_4+0x8e>
		if (valor_PC==0b00000010){
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	b9 f4       	brne	.+46     	; 0xea <__vector_4+0x5a>
			contador++;
  bc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
  c0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <contador+0x1>
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <contador+0x1>
  ca:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador>
			if (contador==256){
  ce:	81 15       	cp	r24, r1
  d0:	91 40       	sbci	r25, 0x01	; 1
  d2:	21 f4       	brne	.+8      	; 0xdc <__vector_4+0x4c>
				contador=0;
  d4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <contador+0x1>
  d8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <contador>
			}
			pulsador++;
  dc:	2f 5f       	subi	r18, 0xFF	; 255
  de:	3f 4f       	sbci	r19, 0xFF	; 255
  e0:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <pulsador+0x1>
  e4:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <pulsador>
  e8:	1e c0       	rjmp	.+60     	; 0x126 <__vector_4+0x96>
		}else if (valor_PC==0b00000001){
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	e1 f4       	brne	.+56     	; 0x126 <__vector_4+0x96>
			contador--;
  ee:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
  f2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <contador+0x1>
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <contador+0x1>
  fc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador>
			if(contador<0){
 100:	99 23       	and	r25, r25
 102:	34 f4       	brge	.+12     	; 0x110 <__vector_4+0x80>
				contador=255;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <contador+0x1>
 10c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador>
			}
			pulsador++;
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
 114:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <pulsador+0x1>
 118:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <pulsador>
 11c:	04 c0       	rjmp	.+8      	; 0x126 <__vector_4+0x96>
		}
	}else{
		pulsador=0;
 11e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <pulsador+0x1>
 122:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <pulsador>
	}
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <setup>:

void setup(void){
	cli();
 13a:	f8 94       	cli
	DDRD=0b11111111;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	8a b9       	out	0x0a, r24	; 10
	PCICR=0;
 140:	e8 e6       	ldi	r30, 0x68	; 104
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	10 82       	st	Z, r1
	PCICR |=(1<<PCIE1);
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 83       	st	Z, r24
	PCMSK1|=(1<<PCINT8);
 14c:	ec e6       	ldi	r30, 0x6C	; 108
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	81 60       	ori	r24, 0x01	; 1
 154:	80 83       	st	Z, r24
	PCMSK1|=(1<<PCINT9);
 156:	80 81       	ld	r24, Z
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	80 83       	st	Z, r24
	UCSR0B=0;
 15c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	sei();
 160:	78 94       	sei
 162:	08 95       	ret

00000164 <main>:
}

int main(void){
	setup();
 164:	0e 94 9d 00 	call	0x13a	; 0x13a <setup>
	//muestra el valor del contador
	while(1){
		PORTD=contador;
 168:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador>
 16c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	81 ee       	ldi	r24, 0xE1	; 225
 172:	94 e0       	ldi	r25, 0x04	; 4
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x10>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x1a>
 17e:	00 00       	nop
 180:	f3 cf       	rjmp	.-26     	; 0x168 <main+0x4>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
